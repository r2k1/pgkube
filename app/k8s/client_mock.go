// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package k8s

import (
	"context"
	"sync"
)

// Ensure, that ClientMock does implement ClientInterface.
// If this is not the case, regenerate this file with moq.
var _ ClientInterface = &ClientMock{}

// ClientMock is a mock implementation of ClientInterface.
//
//	func TestSomethingThatUsesClientInterface(t *testing.T) {
//
//		// make and configure a mocked ClientInterface
//		mockedClientInterface := &ClientMock{
//			NodeMetricsFunc: func(ctx context.Context, nodeName string) (NodeMetrics, error) {
//				panic("mock out the NodeMetrics method")
//			},
//		}
//
//		// use mockedClientInterface in code that requires ClientInterface
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// NodeMetricsFunc mocks the NodeMetrics method.
	NodeMetricsFunc func(ctx context.Context, nodeName string) (NodeMetrics, error)

	// calls tracks calls to the methods.
	calls struct {
		// NodeMetrics holds details about calls to the NodeMetrics method.
		NodeMetrics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NodeName is the nodeName argument value.
			NodeName string
		}
	}
	lockNodeMetrics sync.RWMutex
}

// NodeMetrics calls NodeMetricsFunc.
func (mock *ClientMock) NodeMetrics(ctx context.Context, nodeName string) (NodeMetrics, error) {
	if mock.NodeMetricsFunc == nil {
		panic("ClientMock.NodeMetricsFunc: method is nil but ClientInterface.NodeMetrics was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		NodeName string
	}{
		Ctx:      ctx,
		NodeName: nodeName,
	}
	mock.lockNodeMetrics.Lock()
	mock.calls.NodeMetrics = append(mock.calls.NodeMetrics, callInfo)
	mock.lockNodeMetrics.Unlock()
	return mock.NodeMetricsFunc(ctx, nodeName)
}

// NodeMetricsCalls gets all the calls that were made to NodeMetrics.
// Check the length with:
//
//	len(mockedClientInterface.NodeMetricsCalls())
func (mock *ClientMock) NodeMetricsCalls() []struct {
	Ctx      context.Context
	NodeName string
} {
	var calls []struct {
		Ctx      context.Context
		NodeName string
	}
	mock.lockNodeMetrics.RLock()
	calls = mock.calls.NodeMetrics
	mock.lockNodeMetrics.RUnlock()
	return calls
}
