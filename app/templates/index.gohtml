<!DOCTYPE html>
<html>
<head>
    <title>Home Page</title>
    <link rel="stylesheet" href="/assets/style.css">
    <link href="/assets/bootstrap.min.css" rel="stylesheet">
    <script src="/assets/htmx.js"></script>
    <script src="/assets/bootstrap.min.js"></script>
</head>
<body>
<div class="container-fluid">
    <form hx-target="#data"
          hx-get="/workload"
          hx-select="#data"
          hx-trigger="change from:.trigger-update"
          hx-params="range,start,end,col"
          hx-indicator="#indicator"
          hx-sync="this:replace"
          hx-disabled-elt=".trigger-update"
    >
        <div id="indicator" class="htmx-indicator spinner-border position-fixed right-0" role="status" style="right: 0">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div style="display: flex">
            <div class="mx-2">
                <label>Columns</label>
                {{ range .Cols }}
                    <div>
                        <input type="checkbox"
                               name="col"
                               value="{{ . }}"
                               id="col-{{ . }}"
                               {{ if $.Request.IsColSelected . }}checked{{ end }}
                               class="form-check-input trigger-update"
                        />
                        <label class="form-check-label"
                               for="col-{{ . }}"
                        >{{ . }}</label>
                    </div>
                {{ end }}
            </div>
            <div class="mx-2">
                <label>Time Range</label>
                <fieldset style="max-width: 600px">
                    <input class="trigger-update" id="start" type="hidden" name="start" value="{{.Request.StartValue}}"/>
                    <input class="trigger-update" id="end" type="hidden" name="end" value="{{.Request.EndValue}}"/>
                    <div class="input-group">
                        <a id="range-prev" class="btn btn-primary">&larr;</a>
                        <input id="start-local" name="start-local" type="datetime-local" />
                        <span class="input-group-text">To</span>
                        <input id="end-local" name="end-local" type="datetime-local" />
                        <a id="range-next" class="btn btn-primary">&rarr;</a>
                    </div>
                </fieldset>
                <div class="mt-2">
                    <div class="btn-group" role="group" aria-label="Basic example">
                        {{ range .TimeRangeOptions }}
                            <input type="radio"
                                   class="btn-check form-check-input trigger-update"
                                   id="range-{{ .Value }}"
                                   {{ if eq .Value $.Request.Range }}checked{{ end }}
                                   name="range"
                                   value="{{ .Value }}"
                                   start-date="{{ .StartDate }}"
                                   end-date="{{ .EndDate }}"
                            >
                            <label class="btn btn-primary" for="range-{{ .Value }}"
                                   class="form-label">{{.Label}}</label>
                        {{ end }}
                    </div>
                </div>
            </div>
        </div>
    </form>

    <div id="data">
        {{ template "data.gohtml" . }}
    </div>
</div>
<script>
    function iso8601ToDatetimeLocal(isoStr) {
        const date = new Date(isoStr);
        return dateToDatetimeLocal(date)
    }

    function dateToDatetimeLocal(date) {
        const offset = date.getTimezoneOffset() * 60000; // Convert offset to milliseconds
        const localISOTime = (new Date(date.getTime() - offset)).toISOString().slice(0, -1);
        return localISOTime.substring(0, localISOTime.lastIndexOf(':'));
    }

    function datetimeLocalToIso8601(datetimeLocalStr) {
        return new Date(datetimeLocalStr).toISOString();
    }


    function initStartEndLocal() {
        let start = document.getElementById('start').value;
        let end = document.getElementById('end').value;
        if (start) {
            document.getElementById('start-local').value = iso8601ToDatetimeLocal(start)
        }
        if (end) {
            document.getElementById('end-local').value = iso8601ToDatetimeLocal(end)
        }
    }
    initStartEndLocal()

    function unselectRange() {
        var radioButtons = document.getElementsByName('range');
        for (var i = 0; i < radioButtons.length; i++) {
            radioButtons[i].checked = false;
        }
    }

    function setStart(date) {
        document.getElementById('start').value = date.toISOString();
        document.getElementById('start-local').value = dateToDatetimeLocal(date);
        var changeEvent = new Event('change');
        unselectRange();
        document.getElementById('start').dispatchEvent(changeEvent);
    }

    function setEnd(date) {
        document.getElementById('end').value = date.toISOString();
        document.getElementById('end-local').value = dateToDatetimeLocal(date);
        var changeEvent = new Event('change');
        unselectRange();
        document.getElementById('end').dispatchEvent(changeEvent);
    }

    document.getElementById('start-local').addEventListener('change', function (event) {
        setStart(new Date(event.target.value));

    });
    document.getElementById('end-local').addEventListener('change', function (event) {
        setEnd(new Date(event.target.value));
    });

    document.querySelectorAll('input[name="range"]').forEach(function (input) {
        input.addEventListener('change', function (event) {
            let startDate = event.target.getAttribute('start-date');
            let endDate = event.target.getAttribute('end-date');
            document.getElementById('start-local').value = iso8601ToDatetimeLocal(startDate);
            document.getElementById('end-local').value = iso8601ToDatetimeLocal(endDate);
        });
    });

    document.getElementById('range-prev').addEventListener("click", function (event) {
        let start = new Date(document.getElementById('start').value);
        let end = new Date(document.getElementById('end').value);
        let diff = end - start;
        start.setMilliseconds(-diff);
        end.setMilliseconds(-diff);
        setStart(start);
        setEnd(end);
    });

    document.getElementById("range-next").addEventListener("click", function (event) {
        let start = new Date(document.getElementById('start').value);
        let end = new Date(document.getElementById('end').value);
        let diff = end - start;
        start.setMilliseconds(diff);
        end.setMilliseconds(diff);
        setStart(start);
        setEnd(end);
    });
</script>
</body>
</html>
