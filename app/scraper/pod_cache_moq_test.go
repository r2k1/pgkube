// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package scraper

import (
	v1 "k8s.io/api/core/v1"
	"sync"
)

// Ensure, that PodCacheMock does implement PodCache.
// If this is not the case, regenerate this file with moq.
var _ PodCache = &PodCacheMock{}

// PodCacheMock is a mock implementation of PodCache.
//
//	func TestSomethingThatUsesPodCache(t *testing.T) {
//
//		// make and configure a mocked PodCache
//		mockedPodCache := &PodCacheMock{
//			GetFunc: func(namespace string, name string) (*v1.Pod, error) {
//				panic("mock out the Get method")
//			},
//		}
//
//		// use mockedPodCache in code that requires PodCache
//		// and then make assertions.
//
//	}
type PodCacheMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1.Pod, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *PodCacheMock) Get(namespace string, name string) (*v1.Pod, error) {
	if mock.GetFunc == nil {
		panic("PodCacheMock.GetFunc: method is nil but PodCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedPodCache.GetCalls())
func (mock *PodCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
